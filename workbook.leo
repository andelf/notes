<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="andelf.20100313122825.1226"><vh>@chapters</vh></v>
<v t="andelf.20100319235445.1254"><vh>Notes</vh>
<v t="andelf.20100331192249.1266"><vh>Ruby</vh>
<v t="andelf.20100331192249.1267"><vh>Misc</vh></v>
</v>
<v t="andelf.20100331192249.1263"><vh>IronPython</vh>
<v t="andelf.20100415150027.3846"><vh>命令行参数</vh></v>
<v t="andelf.20100415150027.3847"><vh>编译为 exe</vh></v>
<v t="andelf.20100331192249.1265"><vh>Shell</vh></v>
<v t="andelf.20100331192249.1268"><vh>Types</vh></v>
<v t="andelf.20100331192249.1269"><vh>BIFs</vh></v>
<v t="andelf.20100331192249.1271"><vh>Modules</vh></v>
<v t="andelf.20100331192249.1272"><vh>.Net Objects</vh></v>
<v t="andelf.20100331192249.1273"><vh>Write Application/Design Pattern</vh></v>
<v t="andelf.20100331192249.1280"><vh>First class function in action</vh></v>
<v t="andelf.20100331192249.1284"><vh>XML Settings</vh></v>
<v t="andelf.20100331192249.1279"><vh>重载方法</vh></v>
<v t="andelf.20100331192249.1276"><vh>异常对应关系</vh></v>
<v t="andelf.20100331192249.1270"><vh>Misc</vh></v>
</v>
<v t="andelf.20100415150027.3848"><vh>WPF</vh></v>
<v t="andelf.20100331192249.1283"><vh>golang</vh>
<v t="andelf.20100331192249.1282"><vh>GoLang</vh></v>
</v>
</v>
<v t="andelf.20100313122825.1234" a="E"><vh>service</vh>
<v t="andelf.20100830224510.1340"><vh>Discuz</vh></v>
<v t="andelf.20100830224510.1335"><vh>Apache</vh></v>
<v t="andelf.20100830224510.1330"><vh>Linux</vh>
<v t="andelf.20100830224510.1331"><vh>linux 强制登出其他用户</vh></v>
</v>
<v t="andelf.20100325195808.1258"><vh>Zope/Plone</vh>
<v t="andelf.20100325195808.1259"><vh>Plone</vh>
<v t="andelf.20100415150027.3844"><vh>基本配制安装</vh></v>
<v t="andelf.20100415150027.3845"><vh>Plone3 from 0</vh></v>
<v t="andelf.20100325195808.1262"><vh>protal_actions</vh></v>
<v t="andelf.20100325195808.1261"><vh>FAQ</vh></v>
<v t="andelf.20100325195808.1260"><vh>basic_properties</vh></v>
</v>
</v>
<v t="andelf.20100323230925.1257"><vh>Django under Apache</vh></v>
<v t="andelf.20100313122825.1241"><vh>Helix</vh></v>
<v t="andelf.20100313122825.1243"><vh>BitTorrent</vh></v>
<v t="andelf.20100313122825.1242"><vh>MySQL</vh>
<v t="andelf.20100905225336.1344"><vh>备份</vh></v>
</v>
<v t="andelf.20100905225336.1345" a="E"><vh>nginx</vh>
<v t="andelf.20100905225336.1346"><vh>Nginx跳转参数与实例</vh></v>
<v t="andelf.20100905225336.1347"><vh>Nginx 常见配置总结</vh></v>
</v>
<v t="andelf.20100313122825.1235"><vh>MoinMoin</vh></v>
</v>
<v t="andelf.20100313122825.1225"><vh>neup</vh>
<v t="andelf.20100830224510.1334"><vh>neupioneer.com</vh></v>
<v t="andelf.20100830224510.1332"><vh>202.118.17.181</vh></v>
<v t="andelf.20100830224510.1333"><vh>202.118.17.182</vh></v>
<v t="andelf.20100313122825.1227"><vh>202.118.17.188</vh>
<v t="andelf.20100313122825.1231"><vh>DataBase</vh>
<v t="andelf.20100313122825.1232"><vh>neupwww</vh>
<v t="andelf.20100313122825.1233"><vh>addonarticle</vh></v>
</v>
</v>
<v t="andelf.20100313122825.1228"><vh>phpMyAdmin</vh></v>
<v t="andelf.20100313122825.1229"><vh>www.neu-pioneer.cn</vh></v>
</v>
<v t="andelf.20100714225225.1328"><vh>202.118.17.168</vh></v>
<v t="andelf.20100313122825.1236"><vh>202.118.17.187</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="andelf.20100313122825.1225"></t>
<t tx="andelf.20100313122825.1226"></t>
<t tx="andelf.20100313122825.1227">bbs,  主站

root
&lt;xianfengwang188@neup&gt;</t>
<t tx="andelf.20100313122825.1228">http://www.neu-pioneer.cn/skydongzhu/
web@tech.182</t>
<t tx="andelf.20100313122825.1229">db: neupwww
织梦 CMS, 数据库表前缀 dede_

管理 liuzhaoxing 123456

a = md5.new("xxxx")
a.hexdigest()[5:5+20]</t>
<t tx="andelf.20100313122825.1231"></t>
<t tx="andelf.20100313122825.1232"></t>
<t tx="andelf.20100313122825.1233">aid # article id
typeid # 类型id
body # 新闻主题
redirecturl #  
templet # 
userip # 提交者ip</t>
<t tx="andelf.20100313122825.1234"></t>
<t tx="andelf.20100313122825.1235">Setting up a MoinMoin wiki
for historical purposes here is how I got my wiki set up 

all commands were performed as root su - 
Code:
yum install moin
each line executed 
Code:
mkdir /var/www/moin/mywiki 
cp -R /usr/share/moin/data /var/www/moin/mywiki
cp -R /usr/share/moin/underlay /var/www/moin/mywiki
cp -R /usr/share/moin/config/wikiconfig.py /var/www/moin/mywik
set the permissions for the directories 
Code:
chown -R apache:apache /var/www/moin   
chmod -R ug+rwX /var/www/moin    
chmod -R o-rwx /var/www/moin
create a moin.conf in the httpd directory like so... 

Code:
gedit /etc/httpd/conf.d/moin.conf
add the following to the file 

Quote:
Alias /wiki/ "/usr/share/moin/htdocs/"
&lt;Location /mywiki&gt;
SetHandler python-program
# Add the path of your wiki directory
PythonPath "['/var/www/moin/mywiki'] + sys.path"
PythonHandler MoinMoin.request::RequestModPy.run
# Location value must match the Apache Location value!
PythonOption Location /mywiki
&lt;/Location&gt;
Open the Moin configuration file you copied over earlier (wikiconfig.py) and edit it. You only have to modify it in a few places ( in red need to be adjusted to your configuration):

# Site name, used by default for wiki name-logo [Unicode]
sitename = u'The title of my new Wiki'

# Where your mutable wiki pages are. You want to make regular
# backups of this directory.
data_dir = '/var/www/moin/mywiki/data/'

# Where read-only system and help page are. You might want to share
# this directory between several wikis. When you update MoinMoin,
# you can safely replace the underlay directory with a new one. This
# directory is part of MoinMoin distribution, you don't have to
# backup it.
data_underlay_dir = '/var/www/moin/mywiki/underlay/' 

finally restart httpd 

Code:
/sbin/service httpd restart
Browse to http://localhost/mywiki 

configure away !!</t>
<t tx="andelf.20100313122825.1236">http://202.118.17.187/nagios/ nagiosadmin a1b2c3d4e</t>
<t tx="andelf.20100313122825.1241">git://github.com/bittorrent/Helix.git

需要 bjam
bjam 包, 一个类似 make 的工具
boost-jam, 需要从 boost 下载
需要下载 boost 源码
然后在目录创建 boost-build.jam

-lcrypto 失败, 解决方法 libcrypto 改为 shared (Jamfile)
可能需要修改 libmysql++ 等地址及 include dir

$ bjam release dnadb=on

### By andelf
mysql_db: btdb
mysql_host: localhost
mysql_user: btuser
mysql_password: lovezcx
mysql_port: 3306

表名字需要察看代码.

总体来说, 很废柴. 就是个垃圾.</t>
<t tx="andelf.20100313122825.1242">other db: HBase、Voldemort、MongoDB、MemcacheDB、Redis、Cassandra、HyperTable、 Cassandra

建立新表

$ mysql -uroot -pxxxxx
&gt; create database xxxx;
&gt; show databases;
&gt; GRANT ALL ON employees.* TO manish@localhost IDENTIFIED BY "eagle" </t>
<t tx="andelf.20100313122825.1243"></t>
<t tx="andelf.20100319235445.1254"></t>
<t tx="andelf.20100323230925.1257"># add to /etc/httpd/conf/httpd.conf
# LoadModule python_module modules/mod_python.so
&lt;Location "/dreams"&gt;
    SetHandler python-program
    PythonHandler django.core.handlers.modpython
    PythonPath "['/var/www/']+sys.path"   # django project 位置
    SetEnv DJANGO_SETTINGS_MODULE dreams.settings
    PythonDebug On  # 发布时关掉
&lt;/Location&gt;
# 需要注意, 数据库文件权限. 模板位置设置等.</t>
<t tx="andelf.20100325195808.1258">一般 Zope 默认为 8080 端口
# 可能需要修改 iptables
# zopectl 命令, 或者 /etc/init.d/zope
需要加入 Zope 管理员用户
# zopectl adduser &lt;username&gt; &lt;pass&gt;

然后启动 Zope
在管理界面添加 Zope 实例. 修改 zope.conf

# ./zopectl -d start
# ./zopectl status　　
如果返回结果显示“program running; pid=****”，则说明实例程序已经正常运行。
# netstat -ln --tcp

配置文件zope.conf中，有一个locale的设置: 
locale zh_CN.UTF8
否则日期等会乱码 </t>
<t tx="andelf.20100325195808.1259">http://fledna.objectis.net/ fledna lovezcx Plone2.5
http://freeplone3.openia.net/maomao admin lovezcx
</t>
<t tx="andelf.20100325195808.1260">
# base_properties
fontBaseSize : 75%
fontSmallSize : 95%

/*设置站点显示宽度为780px,且居中显示;设置背景色和边框*/

#visual-portal-wrapper{
   width: 780px !important; /* max-width */
   background-color: white;
   border: 2px solid #2D70D7;
   margin: 0 auto;
  }


属性	说明
logoName	logo的名字（通过更改这里的名字，也是定制logo的另外一种方法）
fontFamily	备选字体族
fontBaseSize	基础的字体大小，控制整个Plone的字体
fontColor	字体颜色
fontSmallSize	小字体的大小
backgroundColor	背景颜色
linkColor	链接颜色
linkActiveColor	激活链接颜色
linkVisitedColor	访问过的链接颜色
borderWidth	边框宽
borderStyle	边框风格
borderStyleAnnotations	注释的边框类型
globalBorderColor	全局边框颜色
globalBackgroundColor	全局背景颜色
globalFontColor	全局字体颜色
headingFontFamily	大标题备选字体族
headingFontBaseSize	大标题基础大小
contentViewBorderColor	内容上方标签的边框颜色
contentViewBackgroundColor	内容上方标签的背景颜色
contentViewFontColor	内容上方标签的字体颜色
inputFontColor	输入框字体的颜色
textTransform	文本转换方法
evenRowBackgroundColor	偶数行的背景颜色
oddRowBackgroundColor	奇数行的背景颜色
notifyBorderColor	通知的边框颜色
notifyBackgroundColor	通知的背景颜色
discreetColor	离散区的颜色
helpBackgroundColor	提示的背景颜色
portalMinWidth	网站最小宽度
columnOneWidth	左边面板的宽
columnTwoWidth	右边面板的宽</t>
<t tx="andelf.20100325195808.1261">缓存加速
: CacheFu

目录 RSS 聚合 Tab 开启
: In the ZMI, go to portal_actions / object / syndication and then tick the Visible checkbox and click on the Save Changes button.

Wiki 行为开启
: 网站设置 -&gt; 标记 -&gt; Wiki behavior. Wiki 链接使用 ((XXxxx))

用户选项链接
: portal_actions / user and for 'preferences' and 'undo', click on each and select Visible and then click the "Save Changes" button.

居中, 限制宽度
#visual-portal-wrapper {
    margin: 2em auto 0 auto;
    width: 710px;
  }

锁定内容删除
: 找到被锁内容, url 后加入 /edit, 保存, 然后删除


</t>
<t tx="andelf.20100325195808.1262">包含站点链接, 用户登录后链接, Tab 等

portal_actions/portal_tabs/
可添加顶部 Tab 链接</t>
<t tx="andelf.20100331192249.1263">Enum 中, 带 s 的可 |

System
System.Data
System.Drawing
System.Management (WMI)
System.Environment
System.Diagnostics
System.XML
System.Web
System.IO
Microsoft.Win32
System.Threading
System.Text
System.Windows.Forms
System.Windows (WPF base)
System.ServiceModel</t>
<t tx="andelf.20100331192249.1265">ipy.exe -D -X:TabCompletion -X:ColorfulConsole

# assembly =&gt; compiled code
# when use, must add reference to assembly!(except System, mscorlib, which already)
&gt;&gt;&gt; import clr
&gt;&gt;&gt; clr.AddReference('System.Drawing')
&gt;&gt;&gt; from System.Drawing import Color, Point
&gt;&gt;&gt; Point(10, 30)
&lt;System.Drawing.Point object at 0x000000000000002B [{X=10,Y=30}]&gt;

# Simple Windows Forms App
clr.AddReference('System.Drawing')
from System.Drawing import Color, Point
clr.AddReference('System.Windows.Forms')
from System.Windows.Forms import Application, Button, Form
form = Form()
form.Text = "Hello World"
button = Button(Text="Click Me")
form.Controls.Add(button)  # Add button to form
x, y = 0, 0
def click(sender, event): # click handler
    global x,y
    button.Location = Point(x,y)
    x+= 5
    y+= 5
button.Click += click
Application.Run(form)  # start app

可以导入 tutorial 目录下的 winforms.py 这样 console 会设置另个线程, GUI 不会 block shell. 可以使用 form.Show()
但是 modal(模态) 的 ShowDialog() 会 Block


####

&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
['C:\\IronPython', 'C:\\IronPython\\Lib']
&gt;&gt;&gt; sys.path.append(r'C:\ModuleTestingWithPython\TwoCardPokerLib\bin\  Debug')
&gt;&gt;&gt; sys.path
['C:\\IronPython', 'C:\\IronPython\\Lib', 'C:\\ModuleTestingWithPython\\  TwoCardPokerLib\\bin\\Debug']
&gt;&gt;&gt;
&gt;&gt;&gt; import clr
&gt;&gt;&gt; dir()
['_', '__builtins__', '__doc__', '__name__', 'clr', 'site', 'sys']
&gt;&gt;&gt;
&gt;&gt;&gt; clr.AddReferenceToFile("TwoCardPokerLib.dll")
&gt;&gt;&gt; from TwoCardPokerLib import *
&gt;&gt;&gt; dir()</t>
<t tx="andelf.20100331192249.1266">@language ruby</t>
<t tx="andelf.20100331192249.1267">a.class =&gt; class/type of a
a.methods =&gt; dir(a)

Object.methods
</t>
<t tx="andelf.20100331192249.1268">string = 'Hello World'
string.ToUpper()  # Error
import clr # 提供 .Net Runtime 交互
string.ToUppeer()

System.String == str
from __future__ import division # 依然可用
# / //
System.Int32 == int
System.Double == float
System.Object == object
System.Boolean == bool</t>
<t tx="andelf.20100331192249.1269">abs enumerate len isinstance max min open range reversed sorted sum zip

etc.
</t>
<t tx="andelf.20100331192249.1270">python use lexical scoping</t>
<t tx="andelf.20100331192249.1271">import sys
sys.path.append("d:\\python26\\lib")

一些 C 模块使用 C# 内建, re cStringIO, etc</t>
<t tx="andelf.20100331192249.1272">OS -&gt; CLR(Common Language Runtime) -&gt; 
BCL(Basic Class Library) [System, System.Collections, System.Io...] -&gt;
Windows Forms, WIndows Services, ASP.NET

Windows Forms:
    Application, Form class

form = Form(Text="Hello")
Application.Run(form)

所有 GUI 元素都在 System.Windows.Forms 名字空间. 继承自 Control 类(直接或间接)
Text, BackColor, ForeColor, Font, Size, Location, Height, Width 等属性

Control.Controls =&gt; ControlCollection, child controls
.Add(xx) 方法 
len()
.AddRange(Array(xxx)) # can't use list
也可以使用 child.Parent = form, 自动加入 Controls 容器

System.Drawing.Color
Color.Red =&gt; R, G, B, A 属性
Color.FromArgb # 接受多参数或 Int32

边框样式
Form =&gt; FormBorderStyle ,(Enum, 位于 Forms NS) FixedSingle, Fixed3D, FixedToolWindow, FixedDialog, None
Control =&gt; BorderStyle , Fixed3D, FixedSingle, None

字体 System.Drawing NS 下的 Font FontStyle
Font("Verdana", 16, FontStyle.Bold | FontStyle.Italic)

对齐 label.TextAlign = ContentAlignment.MiddleCenter
位置 form.Top, .Left 可设置, Right Bottom 为只读属性
不透明度 form.Opacity = 0.7
.Location = Point(x,x)

基于事件的编程
委派( delegate ): are classes that wrap methods so that they can be called like functions -&gt;
this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.xxx_handler) 
xxx.MouseMove += handler
在 Python 中使用
def onMouseMove(sender, event):
    prinnt event.X, event.Y
form.MouseMove += onMouseMove

随机数 System.Random([int seed]). r.Next([maxV, minV]), NextBytes, NextDouble() -&gt; (0,1)

继承 .Net 类型
class MainForm(Form):
    def __init__(self):
        # Controls 不必都命名到 self.
        self.AutoSize = True
        ....
mainForm = MainForm()
Application.Run(mainForm)

        </t>
<t tx="andelf.20100331192249.1273">.Net 使用 interface, IList, IDictionary
Python 使用 protocol, magic methods
x = s[key], s.__getitem__(key)
s[key] = x, s.__setitem__(key, x)
del s[key], s.__delitem__(key)

MVC 模式
model: OO representation of data
view: layout of app, gui
controller: change model, mediate between view and model

View Layer: user interface
多 Tab UI 使用 TabControl 控件, 其中页面使用 TagPage 控件

子 control 在父 control 布局使用 .Dock 和 .Anchor 控制, 值为 Enum
DockStyle.Bottom, Fill(填充可用空间), Left, None, Top(比如菜单栏,工具栏)
AnchorStyles.Bottom, Left, None, Right, Top # 注意 s

Form.MinimumSize= Size(x,y) #  最小
Application.EnableVisualStyles() # 启用主题

command pattern, 如 QAction

ShowDialog() -&gt; DialogResult.'Abort', 'Cancel', 'Ignore', 'No', 'None', 'OK', 'Retry', 'Yes'

# 路径
System.IO.Path - os.path
&gt;&gt;&gt; from System.IO import Path
&gt;&gt;&gt; Path.GetDirectoryName("c:\\boot.ini")
'c:\\'
&gt;&gt;&gt; Path.GetFileName("c:\\boot.ini")
'boot.ini'
Application.ExecutablePath # =&gt; 执行文件名
Path.Combile(Path, relative_path)

文件对话框使用
# SavaFileDialog 继承自 FileDialog
a = SaveFileDialog()
a.ShowDialog() # =&gt; System.Windows.Forms.DialogResult.OK
a.FileName # =&gt; 'D:\\IronPython-2.6\\License.html'
# 其他 .InitialDirectory(str), .Filter(str), .Title

写入文件
System.IO.StreamWriter .StreamReader
writer = StreamWriite('filename.txt')
writer.Write("Some text")
writer.Close()
# IO.File 方法: .ReadAllText WriteAllText etc. 需要提供 FileAccess
IO.File.Exists IO.Directory.Exists 可判断文件或目录

消息框
Forms 下: MessageBox, MessageBoxButtons, MessageBoxIcon
MessageBox.Show(.....) # 多重载 =&gt; DialogResult
MessageBox.Show("Hello World", "!!", MessageBoxButtons.AbortRetryIgnore)
MessageBox.Show("Hello World", "!!", MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Asterisk)

菜单项目
.Dock = DockStyle.Top
顶层菜单 MenuStrip, 菜单条目 ToolStripMenuItem
saveItem = ToolStripMenuItem()
saveItem.Text = '&amp;Save...'
saveItem.ShortcutKeys = Keys.S | Keys.Control
# 使用 lambda: item.Click += lambda sender, event: command.execute()
fileMenu = ToolStripMenuItem()
fileMenu.Text = '&amp;File'
fileMenu.DropDownItems.Add(saveItem)
# 顶层
menuStrip = MenuStrip()
menuStrip.Items.Add(fileMenu)
# 工具栏使用 ToolStrip, 不建议使用过时的 ToolBar
# 单个按钮使用 ToolStripButton, 工具栏图标可以使用 .Image=Bitmap(..) [System.Drawing, 可以使用文件路径初始化]
# 然后设置 .DisplayStyle 为 ToolStripItemDisplayStyle.Image
###Bitmap 可用于  PictureBox 控件. 可以使用方法: .Save(filename, ImageFormat.??) .GetPixel(X,Y) .SetPixel(..)
button.TransparentColor = Color.Magenta # 一般设置法?? 没这个属性
button.ToolTipText = 'Save'
toolbar= ToolStrip()
toolbar.Items.Add(button)
toolbar.Dock = DockStyle.Top # 默认
toolbar.GripStyle = ToolStripGripStyle.Hidden # 去掉位置调整 handle
</t>
<t tx="andelf.20100331192249.1276"># ?? 使用前面的 Python exception 即可
Exception System.Exception
StandardError SystemException
IOError IOException
UnicodeEncodeError EncoderFallbackException
UnicodeDecodeError DecoderFallbackException
MemoryError OutOfMemoryException
Warning WarningException
StopIteration InvalidOperationException subtype
WindowsError Win32Exception
EOFError EndOfStreamException
NotImplementedError  NotImplementedException
AttributeError MissingMemberException
IndexError IndexOutOfRangeException
KeyError System.Collections.Generic.KeyNotFoundException
ArithmeticError ArithmeticException
OverflowError OverflowException
ZeroDivisionError DivideByZeroException
TypeError ArgumentTypeException</t>
<t tx="andelf.20100331192249.1279">Bitmap 继承自 Image

# also MenuStrip
&gt;&gt;&gt; help(toolbar.Items.Add)
Help on built-in function Add

 |  Add(...)
 |          ToolStripItem Add(self, str text, Image image, EventHandler onClick)
 |          int Add(self, ToolStripItem value)
 |          ToolStripItem Add(self, str text, Image image)
 |          ToolStripItem Add(self, str text)
 |          ToolStripItem Add(self, Image image)

&gt;&gt;&gt; help(imglist.Images.Add)
Help on built-in function Add

 |  Add(...)
 |          Add(self, Image value)
 |          int Add(self, Image value, Color transparentColor)
 |          Add(self, Icon value)
 |          Add(self, str key, Image image)
 |          Add(self, str key, Icon icon)
 </t>
<t tx="andelf.20100331192249.1280">Python 函数修饰符
def wrapper(function):
    def inner(*args):
        if None in args:
            print "Warnning: None in arguments"
        print "From Wrapper"
        return function(*args)
    return inner
wrapped = wrapper(somefunction)
@wrapper
def xxx():
    pass

##############################
.Net 中 XML 相关 ns
System.XML  XMLReader, XMLWriter
System.XML.Schema  xsd
System.XML.Serialization
System.XML.XPath  XQuery 1.0, XPath 2.0
System.XML.Xsl

</t>
<t tx="andelf.20100331192249.1282">Google Go：初级读本
Tags: Go, golang, google 
from http://www.infoq.com/cn/articles/google-go-primer

作者 Samuel Tesla 译者 黄璜 发布于 2010年4月2日 上午12时5分

Google最近发布新型的编程语言，Go。它被设计为将现代编程语言的先进 性带入到目前仍由C语言占统治地位的系统层面。然而，这一语言仍在试验阶段并在不断演变。

Go语言的设计者计划设计一门简单、高效、安全和 并发的语言。这门语言简单到甚至不需要有一个符号表来进行词法分析。它可以快速地编译；整个工程的编译时间在秒以下的情况是常事。它具备垃圾回收功能，因 此从内存的角度是安全的。它进行静态类型检查，并且不允许强制类型转换，因而对于类型而言是安全的。同时语言还内建了强大的并发实现机制。

阅读Go
Go的语法传承了与C一样的风格。程序由函数组成，而函数体是一系列的语句序列。一段代码块用花括号括起来。这门语言保留有限的关键字。表达式使用 同样的中缀运算符。语法上并无 太多出奇之处。

Go语言的作者在设计这一语言时坚持一个单一的指导原则：简单明了至上。一些新的语法构件提供了简明地表达一些约定俗成的概 念的方式，相较之下用C表达显得冗长。而其他方面则是针对几十年的使用所呈现出来的一些不合理的语言选择作出了改进。

变量声明
变量是如下声明的：

var sum int // 简单声明var total int = 42 // 声明并初始化最值得注意的是，这些声明里的类型跟在变量名的后面。乍一看有点怪，但这更清晰明了。比如，以下面这个C片段来说：

int* a, b;它并明了，但这里实际的意思是a是一个指针，但b不是。如果要将两者都声明为指针，必须要重复星号。然后在Go语言里，通过如下方式可以将两者都 声明为指针：

var a, b *int如果一个变量初始化了，编译器通常能推断它的类型，所以程序员不必显式的敲出来：

var label = "name"然而，在这种情况下var几乎显得是多余了。因此，Go的作者引入了一个新的运算符来 声明和初始化一个新的变量：

name := "Samuel"条件语句
Go语言当中的条件句与C当中所熟知的if-else构造一样，但条件不需要被打包在括号内。这样可以减少阅读代码时的视觉上的混乱。

括号并不是唯一被移去的视觉干扰。在条件之间可以包括一个简单的语句，所以如下的代码：

result := someFunc();if result &gt; 0 {	/* Do something */} else {	/* Handle error */}可以被精简成：

if result := someFunc(); result &gt; 0 { 	/* Do something */} else {	/* Handle error */}然而，在后面这个例子当中，result只在条件块内部有效&amp;mdash;&amp;mdash;而前者 中，它在整个包含它的上下文中都是可存取的。

分支语句
分支语句同样是似曾相识，但也有增强。像条件语句一样，它允许一个简单的语句位于分支的表达式之前。然而，他们相对于在C语言中的分支而言走得更远。

首先，为了让分支跳转更简明，作了两个修改。情况可以是逗号分隔的列表，而fall-throuth也不再是默认的行为。

因此，如下的C代码：

int result;switch (byte) { case 'a': case 'b':   {     result = 1     break   } default:   result = 0}在Go里就变成了这样：

var result intswitch byte {case 'a', 'b':  result = 1default:  result = 0}第二点，Go的分支跳转可以匹配比整数和字符更多的内容，任何有效的表达式都可以作为跳转语句值。只要它与分支条件的类型是一样的。

因此如下的C代码：

int result = calculate();if (result &lt; 0) {  /* negative */} else if (result &gt; 0) {  /* positive */} else {  /* zero */}在Go里可以这样表达：

switch result := calculate(); true {case result &lt; 0:  /* negative */case result &gt; 0:  /* positive */default:  /* zero */}这些都是公共的约定俗成，比如如果分支值省略了，就是默认为真，所以上面的代码可以这样写：

switch result := calculate(); {case result &lt; 0:  /* negative */case result &gt; 0:  /* positive */default:  /* zero */}循环
Go只有一个关键字用于引入循环。但它提供了除do-while外C语言当中所有可用的循环方式。

条件
for a &gt; b { /* ... */ }初始，条件和步进
for i := 0; i &lt; 10; i++ { /* ... */ }范围
range语句右边的表达式必须是array，slice，string或者map， 或是指向array的指针，也可以是channel。

for i := range "hello" { /* ... */ }无限循环
for { /* ever */ }函数
声明函数的语法与C不同。就像变量声明一样，类型是在它们所描述的术语之后声明的。在C语言中：

int add(int a, b) { return a + b }在Go里面是这样描述的：

func add(a, b int) int { return a + b }多返回值
在C语言当中常见的做法是保留一个返回值来表示错误(比如，read()返回0)，或 者保留返回值来通知状态，并将传递存储结果的内存地址的指针。这容易产生了不安全的编程实践，因此在像Go语言这样有良好管理的语言中是不可行的。

认识到这一问题的影响已超出了函数结果与错误通讯的简单需求的范畴，Go的作者们在语言中内建了函数返回多个值的能力。

作为例子，这个函数将返回整数除法的两个部分：

func divide(a, b int) (int, int) {  quotient := a / b  remainder := a % b  return quotient, remainder}有了多个返回值，有良好的代码文档会更好&amp;mdash;&amp;mdash;而Go允许你给返回值命名，就像参数一样。你可以对这些返回的变量赋值，就像其它的变量一样。所以我们可以重写divide：

func divide(a, b int) (quotient, remainder int) {  quotient = a / b  remainder = a % b  return}多返回值的出现促进了"comma-ok"的模式。有可能失败的函数可以返回第二个布尔结果来表示成功。作为替代，也可以返回一个错误对象，因此像下面这样的代码也就不见怪了：

if result, ok := moreMagic(); ok {  /* Do something with result */}匿名函数
有了垃圾收集器意味着为许多不同的特性敞开了大门&amp;mdash;&amp;mdash;其中就包括匿名函数。Go为声明匿名函数提供了简单的语法。像许多动态语言一样，这些函数在它们被定义的范围内创建了词法闭包。

考虑如下的程序：

func makeAdder(x int) (func(int) int) {  return func(y int) int { return x + y }}func main() {  add5 := makeAdder(5)  add36 := makeAdder(36)  fmt.Println("The answer:", add5(add36(1))) //=&gt; The answer: 42}基本类型
像C语言一样，Go提供了一系列的基本类型，常见的布尔，整数和浮点数类型都具备。它有一个Unicode的字符串类型和数组类型。同时该语言还引入了两 种新的类型：slice 和map。

数组和切片
Go语言当中的数组不是像C语言那样动态的。它们的大小是类型的一部分，在编译时就决定了。数组的索引还是使用的熟悉的C语法(如 a[i])，并且与C一样，索引是由0开始的。编译器提供了内建的功能在编译时求得一个数组的长度 (如 len(a))。如果试图超过数组界限写入，会产生一个运行时错误。

Go还提供了切片（slices），作为数组的变形。一个切片(slice)表示一个数组内的连续分段，支持程序员指定底层存储的明确部分。构建一个切片 的语法与访问一个数组元素类似：

/* Construct a slice on ary that starts at s and is len elements long */s1 := ary[s:len]/* Omit the length to create a slice to the end of ary */s2 := ary[s:]/* Slices behave just like arrays */s[0] == ary[s] //=&gt; true// Changing the value in a slice changes it in the arrayary[s] = 1s[0] = 42ary[s] == 42 //=&gt; true该切片所引用的数组分段可以通过将新的切片赋值给同一变量来更改：

/* Move the start of the slice forward by one, but do not move the end */s2 = s2[1:]/* Slices can only move forward */s2 = s2[-1:] // this is a compile error切片的长度可以更改，只要不超出切片的容量。切片s的容量是数组从s[0]到数组尾端的大小，并由内建的cap()函数返回。一个切片的长度永远不能超出它的容量。

这里有一个展示长度和容量交互的例子：

a := [...]int{1,2,3,4,5} // The ... means "whatever length the initializer has"len(a) //=&gt; 5/* Slice from the middle */s := a[2:4] //=&gt; [3 4]len(s), cap(s) //=&gt; 2, 3/* Grow the slice */s = s[0:3] //=&gt; [3 4 5]len(s), cap(s) //=&gt; 3, 3/* Cannot grow it past its capacity */s = s[0:4] // this is a compile error通常，一个切片就是一个程序所需要的全部了，在这种情况下，程序员根本用不着一个数组，Go有两种方式直接创建切片而不用引用底层存储：

/* literal */s1 := []int{1,2,3,4,5}/* empty (all zero values) */s2 := make([]int, 10) // cap(s2) == len(s2) == 10Map类型
几乎每个现在流行的动态语言都有的数据类型，但在C中不具备的，就是dictionary。Go提供了一个基本的dictionary类型叫做map。下 面的例子展示了如何创建和使用Go map：

m := make(map[string] int) // A mapping of strings to ints/* Store some values */m["foo"] = 42m["bar"] = 30/* Read, and exit program with a runtime error if key is not present. */x := m["foo"]/* Read, with comma-ok check; ok will be false if key was not present. */x, ok := m["bar"]/* Check for presence of key, _ means "I don't care about this value." */_, ok := m["baz"] // ok == false/* Assign zero as a valid value */m["foo"] = 0;_, ok := m["foo"] // ok == true/* Delete a key */m["bar"] = 0, false_, ok := m["bar"] // ok == false面向对象
Go语言支持类似于C语言中使用的面向对象风格。数据被组织成structs，然后定义操作这些structs的函数。类似于Python，Go语言提供 了定义函数并调用它们的方式，因此语法并不会笨拙。

Struct类型
定义一个新的struct类型很简单：

type Point struct {  x, y float64}现在这一类型的值可以通过内建的函数new来分配，这将返回一个指针，指向一块内存单元，其所占内存槽初始化为零。

var p *Point = new(Point)p.x = 3p.y = 4这显得很冗长，而Go语言的一个目标是尽可能的简明扼要。所以提供了一个同时分配和初始化struct的语法：

var p1 Point = Point{3,4}  // Valuevar p2 *Point = &amp;Point{3,4} // Pointer方法
一旦声明了类型，就可以将该类型显式的作为第一个参数来声明函数：

func (self Point) Length() float {  return math.Sqrt(self.x*self.x + self.y*self.y);}这些函数之后可作为struct的方法而被调用：

p := Point{3,4}d := p.Length() //=&gt; 5方法实际上既可以声明为值也可以声明为指针类型。Go将会适当的处理引用或解引用对象，所以既可以对类型T，也可以对类型*T声明方式，并合理地使用它们。

让我们为Point扩展一个变换器：

/* Note the receiver is *Point */func (self *Point) Scale(factor float64) {  self.x = self.x * factor  self.y = self.y * factor}然后我们可以像这样调用：

p.Scale(2);d = p.Length() //=&gt; 10很重要的一点是理解传递给MoveToXY的self和其它的参数一样，并且是值传递，而不是引用传递。如果它被声明为Point，那么在方法内修改的struct就不再跟调用方的一样&amp;mdash;&amp;mdash;值在它们传递给方法的时候被 拷贝，并在调用结束后被丢弃。

接口
像Ruby这样的动态语言所强调面向对象编程的风格认为对象的行为比哪种对象是动态类型（duck typing）更为重要。Go所 带来的一个最强大的特性之一就是提供了可以在编程时运用动态类型的思想而把行为定义的合法性检查的工作推到编译时。这一行为的名字被称作接口。

定义一个接口很简单：

type Writer interface {  Write(p []byte) (n int, err os.Error)}这里定义了一个接口和一个写字节缓冲的方法。任何实现了这一方法的对象也实现了这一接口。不需要像Java一样进行声明，编译器能推断出来。这既给予了动态类型的表达能力又保留了静态类型检查的安全。

Go当中接口的运作方式支持开发者在编写程序的时候发现程序的类型。如果几个对象间存在公共行为，而开发者想要抽象这种行为，那么它就可以创建一个接口并使用它。

考虑如下的代码：

// Somewhere in some code:type Widget struct {}func (Widget) Frob() { /* do something */ }// Somewhere else in the code:type Sprocket struct {}func (Sprocket) Frob() { /* do something else */ }/* New code, and we want to take both Widgets and Sprockets and Frob them */type Frobber interface {  Frob()}func frobtastic(f Frobber) { f.Frob() }需要特别指出的很重要的一点就是所有的对象都实现了这个空接口：

interface {}继承
Go语言不支持继承，至少与大多数语言的继承不一样。并不存在类型的层次结构。相较于继承，Go鼓励使用组合和委派，并为此提供了相应的语法甜点使其更容易接受。

有了这样的定义：

type Engine interface {  Start()  Stop()}type Car struct {  Engine}于是我可以像下面这样编写：

func GoToWorkIn(c Car) {  /* get in car */  c.Start();  /* drive to work */  c.Stop();  /* get out of car */}当我声明Car这个struct的时候，我定义了一个匿名成员。这是一 个只能被其类型识别的成员。匿名成员与其它的成员一样，并有着和类型一样的名字。因此我还可以写成c.Engine.Start()。 如果Car并没有其自身方法可以满足调用的话,编译器自动的会将在Car上的调用委派给它的Engine上面的方法。

由匿名成员提供的分离方法的规则是保守的。如果为一个类型定义了一个方法，就使用它。如果不是，就使用为匿名成员定义的方法。如果有两个匿名成员都提供一 个方法，编译器将会报错，但只在该方法被调用的情况下。

这种组合是通过委派来实现的，而不是继承。一旦匿名成员的方法被调用，控制流整个都被委派给了该方法。所以你无法做到和下面的例子一样来模拟类型层次：

type Base struct {}func (Base) Magic() { fmt.Print("base magic") }func (self Base) MoreMagic() {   self.Magic()  self.Magic()}type Foo struct {  Base}func (Foo) Magic() { fmt.Print("foo magic") }当你创建一个Foo对象时，它将会影响Base的两个方法。然而，当你调用MoreMagic时， 你将得不到期望的结果：

f := new(Foo)f.Magic() //=&gt; foo magicf.MoreMagic() //=&gt; base magic base magic并发
Go的作者选择了消息传递模型来作为推荐的并发编程方法。该语言同样支持共享内存，然后作者自有道理：

不要通过共享内存来通信，相反，通过通信来共享内存。该语言提供了两个基本的构件来支持这一范型：goroutines和channels。

Go例程
Goroutine是轻量级的并行程序执行路径，与线程，coroutine或者进程类似。然而，它们彼此相当不同，因此Go作者决定给它一个新的名字并 放弃其它术语可能隐含的意义。

创建一个goroutine来运行名为DoThis的函数十分简单：

go DoThis() // but do not wait for it to complete匿名的函数可以这样使用：

go func() {  for { /* do something forever */ }}() // Note that the function must be invoked这些goroutine将会通过Go运行时而映射到适当的操作系统原语（比如，POSIX线程）。

通道类型
有了goroutine，代码的并行执行就容易了。然而，它们之间仍然需要通讯机制。Channel提供一个FIFO通信队列刚好能达到这一目的。

以下是使用channel的语法：

/* Creating a channel uses make(), not new - it was also used for map creation */ch := make(chan int)/* Sending a value blocks until the value is read */ch &lt;- 4/* Reading a value blocks until a value is available */i := &lt;-ch举例来说，如果我们想要进行长时间运行的数值计算，我们可以这样做：

ch := make(chan int)go func() {  result := 0  for i := 0; i &lt; 100000000; i++ {    result = result + i  }  ch &lt;- result}()/* Do something for a while */sum := &lt;-ch // This will block if the calculation is not done yetfmt.Println("The sum is:", sum)channel的阻塞行为并非永远是最佳的。该语言提供了两种对其进行定制的方式：

程序员可以指定缓冲大小&amp;mdash;&amp;mdash;想缓冲的channel发送消息不会阻塞，除非缓冲已满，同样从缓冲的channel读取也不会阻塞，除非缓冲是空的。 
该语言同时还提供了不会被阻塞的发送和接收的能力，而操作成功是仍然要报告。 
/* Create a channel with buffer size 5 */ch := make(chan int, 5)/* Send without blocking, ok will be true if value was buffered */ok := ch &lt;- 42/* Read without blocking, ok will be true if a value was read */val, ok := &lt;-ch包
Go提供了一种简单的机制来组织代码：包。每个文件开头都会声明它属于哪一个包，每个文件也可以引入它所用到的包。任何首字母大写的名字是由包导出的，并可以被其它的包所使用。

以下是一个完整的源文件：

package geometryimport "math"/* Point is capitalized, so it is visible outside the package. */type Point struct {  /* the fields are not capitalized, so they are not visible     outside of the package */  x, y float64 }/* These functions are visible outside of the package */func (self Point) Length() float64 {  /* This uses a function in the math package */  return math.Sqrt(self.x*self.x + self.y*self.y)}func (self *Point) Scale(factor float64) {  self.setX(self.x * factor)  self.setY(self.y * factor)}/* These functions are not visible outside of the package, but can be   used inside the package */func (self *Point) setX(x float64) { self.x = x }func (self *Point) setY(y float64) { self.y = y }缺失
Go语言的作者试图将代码的清晰明确作为设计该语言作出所有决定的指导思想。第二个目标是生产一个编译速度很快的语言。有了这两个标准作为方向，来 自其它语言的许多特性就不那么适合了。许多程序员会发现他们最爱的语言特性在Go当中不存在，确实，有很多人也许会觉得Go语言由于缺乏其它语言所共有的 一些特性，还不太可用。

这当中两个缺失的特性就是异常和泛型，两者在其它语言当中都是非常有用的。而它们目前都不是Go的一分子。但因为该 语言仍处于试验阶段，它们有可能最终会加入到语言里。然而，如果将Go与其它语言作比较的话，我们应当记住Go是打算在系统编程层面作为C语言的替代。明 白这一点的话，那么缺失的这许多特性倒也不是很大的问题了。

最后，因为这一语言才刚刚发布，因此它没有什么类库或工具可以用，也没有Go语 言的集成编程环境。Go语言标准库有些有用的代码，但这与更为成熟的语言比 起来仍还是很少的。

查看英文原文：Google Go: A Primer。


--------------------------------------------------------------------------------

感谢马国耀对本文的审校。
</t>
<t tx="andelf.20100331192249.1283">@language c</t>
<t tx="andelf.20100331192249.1284">XMLWriterSettings 属性
CheckCharacters True
CloseOutput False
ConformanceLevel Document
Encoding Encoding.UTF8 (Encoding lives in the 
System.Text namespace, and is a useful class.)
Indent False
IndentChars Two spaces
NewLineChars \r\n (carriage return, new line)
NewLineHandling Replace
NewLineOnAttributes False
OmitXmlDeclaration False

clr.AddReference('System.Xml')
from System.Xml import XmlWriter, XmlWriterSettings
 
settings = XmlWriterSettings()
settings.Indent = True
settings.IndentChars = '    ' # four spaces


###  The properties of XmlReaderSettings and the default values

CheckCharacters True
ConformanceLevel ConformanceLevel.Document
IgnoreComments False
IgnoreProcessingInstructions False
IgnoreWhitespace False
LineNumberOffset 0
LinePositionOffset 0
NameTable None
ProhibitDtd True
Schemas An empty XmlSchemaSet object
ValidationFlags ProcessIdentityConstraints enabled
ValidationType ValidationType.None
XmlResolver A new XmlUrlResolver object</t>
<t tx="andelf.20100415150027.3844">Python 2.4
$ wget http://peak.telecommunity.com/dist/ez_setup.py
然后安装:
    PIL, elementtree
    ZopeSkel

$ paster create --list-templates
$ paster create -t plone3_buildout myproject
$ cd myproject
$ python bootstrap.py # distribute/distribute-0.6.1
$ ./bin/buildout</t>
<t tx="andelf.20100415150027.3845">makedir ZopeProjects
wget -6 http://www.python.org/ftp/python/2.4.6/Python-2.4.6.tgz
tar xvf Python-2.4.6.tgz
cd Python-2.4.6
./configure --prefix=$HOME/ZopeProjects
make
make install

export PATH=~/ZopeProjects/bin:$PATH
export PYTHONPATH=~/ZopeProjects/lib/python2.4/site-packages
</t>
<t tx="andelf.20100415150027.3846">D:\IronPython-2.6&gt;ipy /?
Usage: ipy.exe Usage: ipy [options] [file.py|- [arguments]]

Options:
 -3                       Warn about Python 3.x incompatibilities
 -c cmd                   Program passed in as string (terminates option list)
 -D                       Enable application debugging
 -E                       Ignore environment variables
 -h                       Display usage
 -i                       Inspect interactively after running script
 -m module                run library module as a script
 -O                       generate optimized code
 -OO                      remove doc strings and apply -O optimizations
 -Q arg                   Division options: -Qold (default), -Qwarn, -Qwarnall,
-Qnew
 -s                       Don't add user site directory to sys.path
 -S                       Don't imply 'import site' on initialization
 -t                       Issue warnings about inconsistent tab usage
 -tt                      Issue errors for inconsistent tab usage
 -u                       Unbuffered stdout &amp; stderr
 -v                       Verbose (trace import statements) (also PYTHONVERBOSE
x)
 -V                       Print the version number and exit
 -W arg                   Warning control (arg is action:message:category:modul
:lineno)
 -x                       Skip first line of the source
 -X:AutoIndent            Enable auto-indenting in the REPL loop
 -X:ColorfulConsole       Enable ColorfulConsole
 -X:Debug                 Enable application debugging (preferred over -D)
 -X:EnableProfiler        Enables profiling support in the compiler
 -X:ExceptionDetail       Enable ExceptionDetail mode
 -X:Frames                Enable basic sys._getframe support
 -X:FullFrames            Enable sys._getframe with access to locals
 -X:GCStress              Specifies the GC stress level (the generation to coll
ct each statement)
 -X:LightweightScopes     Generate optimized scopes that can be garbage collect
d
 -X:MaxRecursion          Set the maximum recursion level
 -X:MTA                   Run in multithreaded apartment
 -X:NoAdaptiveCompilation Disable adaptive compilation
 -X:PassExceptions        Do not catch exceptions that are unhandled by script
ode
 -X:PrivateBinding        Enable binding to private members
 -X:Python30              Enable available Python 3.0 features
 -X:ShowClrExceptions     Display CLS Exception information
 -X:TabCompletion         Enable TabCompletion mode
 -X:Tracing               Enable support for tracing all methods even before sy
.settrace is called

Environment variables:
 IRONPYTHONPATH    Path to search for module
 IRONPYTHONSTARTUP Startup module</t>
<t tx="andelf.20100415150027.3847"></t>
<t tx="andelf.20100415150027.3848">System.Windows.Media.Color 颜色 aRGB 通道
Color.FromRGB
ColorFROMArgb
scRGB 通道 0~1.0: ScA, ScG, ScB, ScR. 和 RGB 是非线性关系.

System.Windows.Media.Colors 包含各种颜色常量. web 颜色
其中 .Transparent 为特殊颜色(全透明色)

System.Windows.Media.Brush (es) 带 s 为各种对应颜色 Brush







</t>
<t tx="andelf.20100714225225.1328">apt-cache search xxx
</t>
<t tx="andelf.20100830224510.1330">加用户组
</t>
<t tx="andelf.20100830224510.1331">kill -kill -t 　踢人命令
tty　所踢用户的TTY
如上踢出liu用户的命令为： pkill -kill -t pts/1</t>
<t tx="andelf.20100830224510.1332">bt, uccenter, wiki

uccenter:
    创始人: neupioneer@204
    
    </t>
<t tx="andelf.20100830224510.1333"></t>
<t tx="andelf.20100830224510.1334"></t>
<t tx="andelf.20100830224510.1335">域名迁移
&lt;VirtualHost *:80&gt;
     ServerName www.old.com
     DocumentRoot /path/to/htdocs
     ......
     &lt;Directory "/path/to/htdocs"&gt;
         RedirectMatch ^/(.*)$ http://www.new.com/$1
     &lt;/Directory&gt;
&lt;/VirtualHost&gt;</t>
<t tx="andelf.20100830224510.1340">Can not write to cache files, please check directory ./forumdata/ and ./forumdata/cache/
需要对 forumdata chown</t>
<t tx="andelf.20100905225336.1344">一、数据备份捷径 

因为这个方法没有得到官方正式文档的验证，我们暂称为试验吧。 

目的：备份hostA主机中一个mysql数据库TestA，并恢复到到hostB机中 

试验环境： 

操作系统：WinNT4.0，Mysql3.22.34，phpMyAdmin 2.1.0 

在hostA中安装mysql数据库并建立TestA数据库 

hostB机安装mysql数据库，没有TestA数据库 

方法步骤： 

启动phpMyAdmin察看HostA和HostB中的数据库列表，在HostB中没有TestA数据库 

找到HostA中mysql的安装目录，并找到数据库目录data 

在我的试验环境中，这个目录是 

C:mysqldata 

找到对应数据库名称的子目录 

C:mysqldataTestA 

粘贴拷贝到HostB的Data目录下，是HostA同HostB Mysql数据目录下的文件相同 

刷新HostB的phpMyAdmin察看一下数据库列表，我们看到TestA已经出现，并且作查询修改等操作都正常，备份恢复恢复成功 

试验结论：Mysql的数据库可以通过文件形式保存，备份，恢复只要将相应文件目录恢复即可，无需使用其它工具备份。 

二、正规的方法（官方建议）： 

导出要用到MySQL的mysqldump工具，基本用法是： 

mysqldump [OPTIONS] database [tables] 

如果你不给定任何表，整个数据库将被导出。 

通过执行mysqldump --help，你能得到你mysqldump的版本支持的选项表。 

注意，如果你运行mysqldump没有--quick或--opt选项，mysqldump将在导出结果前装载整个结果集到内存中，如果你正在导出一个大的数据库，这将可能是一个问题。 

mysqldump支持下列选项： 

--add-locks 

在每个表导出之前增加LOCK TABLES并且之后UNLOCK TABLE。(为了使得更快地插入到MySQL)。 

--add-drop-table 

在每个create语句之前增加一个drop table。 

--allow-keywords 

允许创建是关键词的列名字。这由在列名前面加表名的方法做到。 

-c, --complete-insert 

使用完整的insert语句(用列名字)。 

-C, --compress 

如果客户和服务器均支持压缩，压缩两者间所有的信息。 

--delayed 

用INSERT DELAYED命令插入行。 

-e, --extended-insert 

使用全新多行INSERT语法。（给出更紧缩并且更快的插入语句） 

-#, --debug[=option_string] 

跟踪程序的使用(为了调试)。 

--help 

显示一条帮助消息并且退出。 

--fields-terminated-by=... 

--fields-enclosed-by=... 

--fields-optionally-enclosed-by=... 

--fields-escaped-by=... 

--fields-terminated-by=... 

这些选择与-T选择一起使用，并且有相应的LOAD DATA INFILE子句相同的含义。 

LOAD DATA INFILE语法。 

-F, --flush-logs 

在开始导出前，洗掉在MySQL服务器中的日志文件。 

-f, --force, 

即使我们在一个表导出期间得到一个SQL错误，继续。 

-h, --host=.. 

从命名的主机上的MySQL服务器导出数据。缺省主机是localhost。 

-l, --lock-tables. 

为开始导出锁定所有表。 

-t, --no-create-info 

不写入表创建信息(CREATE TABLE语句） 

-d, --no-data 

不写入表的任何行信息。如果你只想得到一个表的结构的导出，这是很有用的！ 

--opt 

同--quick --add-drop-table --add-locks --extended-insert --lock-tables。 

应该给你为读入一个MySQL服务器的尽可能最快的导出。 

-pyour_pass, --password[=your_pass] 

与服务器连接时使用的口令。如果你不指定“=your_pass”部分，mysqldump需要来自终端的口令。 

-P port_num, --port=port_num 

与一台主机连接时使用的TCP/IP端口号。（这用于连接到localhost以外的主机，因为它使用 Unix套接字。） 

-q, --quick 

不缓冲查询，直接导出至stdout；使用mysql_use_result()做它。 

-S /path/to/socket, --socket=/path/to/socket 

与localhost连接时（它是缺省主机)使用的套接字文件。 

-T, --tab=path-to-some-directory 

对于每个给定的表，创建一个table_name.sql文件，它包含SQL CREATE 命令，和一个table_name.txt文件，它包含数据。 注意：这只有在mysqldump运行在mysqld守护进程运行的同一台机器上的时候才工作。.txt文件的格式根据--fields-xxx和--lines--xxx选项来定。 

-u user_name, --user=user_name 

与服务器连接时，MySQL使用的用户名。缺省值是你的Unix登录名。 

-O var=option, --set-variable var=option 

设置一个变量的值。可能的变量被列在下面。 

-v, --verbose 

冗长模式。打印出程序所做的更多的信息。 

-V, --version 

打印版本信息并且退出。 

-w, --where='where-condition' 

只导出被选择了的记录；注意引号是强制的！ 

"--where=user='jimf'" "-wuserid&gt;1" "-wuserid&lt;1" 

最常见的mysqldump使用可能制作整个数据库的一个备份： 

mysqldump --opt database &gt; backup-file.sql 

但是它对用来自于一个数据库的信息充实另外一个MySQL数据库也是有用的： 

mysqldump --opt database | mysql --host=remote-host -C database 

由于mysqldump导出的是完整的SQL语句，所以用mysql客户程序很容易就能把数据导入了： 

mysqladmin create target_db_name 

mysql target_db_name &lt; backup-file.sql </t>
<t tx="andelf.20100905225336.1345"></t>
<t tx="andelf.20100905225336.1346">location = / {
# 只匹配 / 查询。
[ configuration A ]
}

location / {
# 匹配任何查询，因为所有请求都已 / 开头。但是正则表达式规则和长的块规则将被优先和查询匹配。
[ configuration B ]
}

location ^~ /images/ {
# 匹配任何已 /images/ 开头的任何查询并且停止搜索。任何正则表达式将不会被测试。
[ configuration C ]
}

location ~* .(gif|jpg|jpeg)$ {
# 不区分大小写匹配任何已 gif、jpg 或 jpeg 结尾的请求。然而所有 /images/ 目录的请求将使用 Configuration C。
[ configuration D ]
}

正则表达式匹配，其中：

* ~ 为区分大小写匹配
* ~* 为不区分大小写匹配
* !~和!~*分别为区分大小写不匹配及不区分大小写不匹配
文件及目录匹配，其中：

* -f和!-f用来判断是否存在文件
* -d和!-d用来判断是否存在目录
* -e和!-e用来判断是否存在文件或目录
* -x和!-x用来判断文件是否可执行
flag标记有：

* last 相当于Apache里的[L]标记，表示完成rewrite
* break 终止匹配, 不再匹配后面的规则
* redirect 返回302临时重定向 地址栏会显示跳转后的地址
* permanent 返回301永久重定向 地址栏会显示跳转后的地址
一些可用的全局变量有，可以用做条件判断(待补全)

$args
$content_length
$content_type
$document_root
$document_uri
$host
$http_user_agent
$http_cookie
$limit_rate
$request_body_file
$request_method
$remote_addr
$remote_port
$remote_user
$request_filename
$request_uri
$query_string
$scheme
$server_protocol
$server_addr
$server_name
$server_port
$uri
结合QeePHP的例子

if (!-d $request_filename) {
rewrite ^/([a-z-A-Z]+)/([a-z-A-Z]+)/?(.*)$ /index.php?namespace=user&amp;amp;controller=$1&amp;amp;action=$2&amp;amp;$3 last;
rewrite ^/([a-z-A-Z]+)/?$ /index.php?namespace=user&amp;amp;controller=$1 last;
break;
多目录转成参数

abc.domian.com/sort/2 =&gt; abc.domian.com/index.php?act=sort&amp;name=abc&amp;id=2

if ($host ~* (.*)\.domain\.com) {
set $sub_name $1;   
rewrite ^/sort\/(\d+)\/?$ /index.php?act=sort&amp;cid=$sub_name&amp;id=$1 last;
}
目录对换

/123456/xxxx -&gt; /xxxx?id=123456

rewrite ^/(\d+)/(.+)/ /$2?id=$1 last;
例如下面设定nginx在用户使用ie的使用重定向到/nginx-ie目录下：

if ($http_user_agent ~ MSIE) {
rewrite ^(.*)$ /nginx-ie/$1 break;
}
目录自动加“/”

if (-d $request_filename){
rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
}
禁止htaccess

location ~/\.ht {
         deny all;
     }
禁止多个目录

location ~ ^/(cron|templates)/ {
         deny all;
break;
     }
禁止以/data开头的文件

可以禁止/data/下多级目录下.log.txt等请求;

location ~ ^/data {
         deny all;
     }
禁止单个目录

不能禁止.log.txt能请求

location /searchword/cron/ {
         deny all;
     }
禁止单个文件

location ~ /data/sql/data.sql {
         deny all;
     }
给favicon.ico和robots.txt设置过期时间;

这里为favicon.ico为99天,robots.txt为7天并不记录404错误日志

location ~(favicon.ico) {
                 log_not_found off;
expires 99d;
break;
     }
 
     location ~(robots.txt) {
                 log_not_found off;
expires 7d;
break;
     }
设定某个文件的过期时间;这里为600秒，并不记录访问日志

location ^~ /html/scripts/loadhead_1.js {
                 access_log   off;
                 root /opt/lampp/htdocs/web;
expires 600;
break;
       }
文件反盗链并设置过期时间

这里的return 412 为自定义的http状态码，默认为403，方便找出正确的盗链的请求

“rewrite ^/ http://leech.c1gstudio.com/leech.gif;”显示一张防盗链图片

“access_log off;”不记录访问日志，减轻压力

“expires 3d”所有文件3天的浏览器缓存

location ~* ^.+\.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ {
valid_referers none blocked *.c1gstudio.com *.c1gstudio.net localhost 208.97.167.194;
if ($invalid_referer) {
    rewrite ^/ http://leech.c1gstudio.com/leech.gif;
    return 412;
    break;
}
                 access_log   off;
                 root /opt/lampp/htdocs/web;
expires 3d;
break;
     }
只充许固定ip访问网站，并加上密码

root  /opt/htdocs/www;
allow   208.97.167.194;
allow   222.33.1.2;
allow   231.152.49.4;
deny    all;
auth_basic "C1G_ADMIN";
auth_basic_user_file htpasswd;
将多级目录下的文件转成一个文件，增强seo效果

/job-123-456-789.html 指向/job/123/456/789.html

rewrite ^/job-([0-9]+)-([0-9]+)-([0-9]+)\.html$ /job/$1/$2/jobshow_$3.html last;
将根目录下某个文件夹指向2级目录

如/shanghaijob/ 指向 /area/shanghai/

如果你将last改成permanent，那么浏览器地址栏显是/location/shanghai/

rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
上面例子有个问题是访问/shanghai 时将不会匹配

rewrite ^/([0-9a-z]+)job$ /area/$1/ last;
rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
这样/shanghai 也可以访问了，但页面中的相对链接无法使用，

如./list_1.html真实地址是/area/shanghia/list_1.html会变成/list_1.html,导至无法访问。

那我加上自动跳转也是不行咯

(-d $request_filename)它有个条件是必需为真实目录，而我的rewrite不是的，所以没有效果

if (-d $request_filename){
rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
}
知道原因后就好办了，让我手动跳转吧

rewrite ^/([0-9a-z]+)job$ /$1job/ permanent;
rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
文件和目录不存在的时候重定向：

if (!-e $request_filename) {
proxy_pass http://127.0.0.1;
}
域名跳转

server
     {
             listen       80;
             server_name  jump.c1gstudio.com;
             index index.html index.htm index.php;
             root  /opt/lampp/htdocs/www;
             rewrite ^/ http://www.c1gstudio.com/;
             access_log  off;
     }
多域名转向

server_name  www.c1gstudio.com www.c1gstudio.net;
             index index.html index.htm index.php;
             root  /opt/lampp/htdocs;
if ($host ~ "c1gstudio\.net") {
rewrite ^(.*) http://www.c1gstudio.com$1 permanent;
}
三级域名跳转

if ($http_host ~* "^(.*)\.i\.c1gstudio\.com$") {
rewrite ^(.*) http://top.yingjiesheng.com$1;
break;
}
域名镜向

server
     {
             listen       80;
             server_name  mirror.c1gstudio.com;
             index index.html index.htm index.php;
             root  /opt/lampp/htdocs/www;
             rewrite ^/(.*) http://www.c1gstudio.com/$1 last;
             access_log  off;
     }
某个子目录作镜向

location ^~ /zhaopinhui {
  rewrite ^.+ http://zph.c1gstudio.com/ last;
  break;
     }
discuz ucenter home (uchome) rewrite

rewrite ^/(space|network)-(.+)\.html$ /$1.php?rewrite=$2 last;
rewrite ^/(space|network)\.html$ /$1.php last;
rewrite ^/([0-9]+)$ /space.php?uid=$1 last;
discuz 7 rewrite

rewrite ^(.*)/archiver/((fid|tid)-[\w\-]+\.html)$ $1/archiver/index.php?$2 last;
rewrite ^(.*)/forum-([0-9]+)-([0-9]+)\.html$ $1/forumdisplay.php?fid=$2&amp;page=$3 last;
rewrite ^(.*)/thread-([0-9]+)-([0-9]+)-([0-9]+)\.html$ $1/viewthread.php?tid=$2&amp;extra=page\%3D$4&amp;page=$3 last;
rewrite ^(.*)/profile-(username|uid)-(.+)\.html$ $1/viewpro.php?$2=$3 last;
rewrite ^(.*)/space-(username|uid)-(.+)\.html$ $1/space.php?$2=$3 last;
rewrite ^(.*)/tag-(.+)\.html$ $1/tag.php?name=$2 last;
给discuz某版块单独配置域名

server_name  bbs.c1gstudio.com news.c1gstudio.com;
 
     location = / {
        if ($http_host ~ news\.c1gstudio.com$) {
  rewrite ^.+ http://news.c1gstudio.com/forum-831-1.html last;
  break;
}
     }
discuz ucenter 头像 rewrite 优化

location ^~ /ucenter {
     location ~ .*\.php?$
     {
  #fastcgi_pass  unix:/tmp/php-cgi.sock;
  fastcgi_pass  127.0.0.1:9000;
  fastcgi_index index.php;
  include fcgi.conf;     
     }
 
     location /ucenter/data/avatar {
log_not_found off;
access_log   off;
location ~ /(.*)_big\.jpg$ {
    error_page 404 /ucenter/images/noavatar_big.gif;
}
location ~ /(.*)_middle\.jpg$ {
    error_page 404 /ucenter/images/noavatar_middle.gif;
}
location ~ /(.*)_small\.jpg$ {
    error_page 404 /ucenter/images/noavatar_small.gif;
}
expires 300;
break;
     }
                       }
jspace rewrite

location ~ .*\.php?$
             {
                  #fastcgi_pass  unix:/tmp/php-cgi.sock;
                  fastcgi_pass  127.0.0.1:9000;
                  fastcgi_index index.php;
                  include fcgi.conf;     
             }
 
             location ~* ^/index.php/
             {
    rewrite ^/index.php/(.*) /index.php?$1 break;
                  fastcgi_pass  127.0.0.1:9000;
                  fastcgi_index index.php;
                  include fcgi.conf;
             }
nginx设置上传目录无执行权限

location ~ ^/upload/.*\.(php|php5)$

{

deny all;

}

其中upload换为你要设置的目录名字

这条规则的含义是匹配请求连接中开头是/upload/，中间匹配任意字符，结尾匹配.php或者.php5的页面，最后利用deny all禁止访问，这样就防止了上传目录的脚本执行权限

为nginx设置默认虚拟主机（空主机头，默认主机头）

nginx的默认虚拟主机在用户通过IP访问，或者通过未设置的域名访问（比如有人把他自己的域名指向了你的ip）的时候生效

最关键的一点事，在server的设置里面添加这一行：

listen 80 default;

后面的default参数表示这个是默认虚拟主机。

这个设置非常有用。

比如别人通过ip或者未知域名访问你的网站的时候，你希望禁止显示任何有效内容，可以给他返回500.

目前国内很多机房都要求网站主关闭空主机头，防止未备案的域名指向过来造成麻烦。就可以这样设置：

server {

listen 80 default;

return 500;

}

也可以把这些流量收集起来，导入到自己的网站，只要做以下跳转设置就可以：

server {

listen 80 default;

rewrite ^(.*) http://www.myip.net permanent;

}防盗链

针对不同的文件类型

#Preventing hot linking of images and other file types

location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)$ {

        valid_referers none blocked server_names *.linuxtone.org linuxtone.org http://localhost baidu.com;

if ($invalid_referer) {

      rewrite   ^/   ;

     # return   403;

      }

}

针对不同的目录

location /img/ {

    root /data/www/wwwroot/bbs/img/;

    valid_referers none blocked server_names *.linuxtone.org http://localhost baidu.com;

    if ($invalid_referer) {

                   rewrite  ^/  ;

                   #return   403;

    }

}

同实现防盗链和expires的方法

#Preventing hot linking of images and other file types

location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)$ {

        valid_referers none blocked server_names *.linuxtone.org linuxtone.org http://localhost ;

if ($invalid_referer) {

      rewrite   ^/   ;

                     }

     access_log off;

     root /data/www/wwwroot/bbs;

expires 1d;

     break;

}

Nginx 身份证验证

#cd /usr/local/nginx/conf

#mkdir htpasswd

/usr/local/apache2/bin/htpasswd -c /usr/local/nginx/conf/htpasswd/tongji linuxtone

#添加用户名为linuxtone

New password:   (此处输入你的密码)

Re-type new password:   (再次输入你的密码)

Adding password for user

http://count.linuxtone.org/tongji/data/index.html(目录存在/data/www/wwwroot/tongji/data/目录下)

将下段配置放到虚拟主机目录，当访问http://count.linuxtone/tongji/即提示要密验证:

location ~ ^/(tongji)/  {

                root    /data/www/wwwroot/count;

                        auth_basic              "LT-COUNT-TongJi";

                        auth_basic_user_file  /usr/local/nginx/conf/htpasswd/tongji;

                }

Nginx 禁止访问某类型的文件.

如，Nginx下禁止访问*.txt文件，配置方法如下.

location ~* \.(txt|doc)$ {

   if (-f $request_filename) {

   root /data/www/wwwroot/linuxtone/test;

   #rewrite …..可以重定向到某个URL

   break;

   }

}

location ~* \.(txt|doc)${

        root /data/www/wwwroot/linuxtone/test;

        deny all;

}</t>
<t tx="andelf.20100905225336.1347">前面总结了几篇nginx的配置文档，但忽略了一些常用的配置，例如访问控制，目录索引，重定向等，因而需要在此记录下，方便熟悉nginx，在此总结的内容也比较肤浅，毕竟刚开始学习nginx,生产环境中使用的也都是Apache，要走的路还很长，要学习的内容也很多，多多努力吧…

1:针对主机的访问控制
[root@yunwei ~]# grep -A 3 -B 3 '192.168.50.40' /usr/local/nginx/conf/nginx.conf
        location / {
            root   html;
            index index.html index.htm;
            allow   192.168.50.40;   //支持整个网段，192.168.50.0/24这样的语法
            deny    all;
        }

[root@yunwei ~]# /usr/local/nginx/sbin/nginx -t
the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
configuration file /usr/local/nginx/conf/nginx.conf test is successful

[root@yunwei ~]# tail -f /usr/local/nginx/logs/access.log
192.168.50.40 - - [21/Jun/2010:15:42:58 +0800] "GET / HTTP/1.1" 304 0 "-" "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; 360SE)"


[root@yunwei ~]# tail -f /usr/local/nginx/logs/error.log 
2010/06/21 15:43:53 [error] 21164#0: *15 access forbidden by rule, client: 192.168.50.27, server: localhost, request: "GET / HTTP/1.1", host: "192.168.50.3"


2：针对用户的访问控制
[root@yunwei ~]# grep -A 5 -B 5 'auth' /usr/local/nginx/conf/nginx.conf

        location / {
            root   html;
            index index.html index.htm;
            allow   192.168.50.0/24;
            deny    all;
            auth_basic "test";
            auth_basic_user_file /usr/local/nginx/conf/.htpasswd;
        }

        error_page 404              /404.html;

[root@yunwei ~]# /usr/local/apache2.2.15/bin/htpasswd -cd /usr/local/nginx/conf/.htpasswd yang
New password: 
Re-type new password: 
Adding password for user yang



3：开启自动索引功能
[root@yunwei ~]# grep -A 3 -B 3 'autoindex' /usr/local/nginx/conf/nginx.conf

        location / {
            root   html;
            autoindex on;
            index index.html index.htm;
            allow   192.168.50.0/24;
            deny    all;



4:整合ZendOptimizer
[root@yunwei ~]# cd /usr/local/src/tarbag/
[root@yunwei tarbag]# wget http://downloads.zend.com/optimizer/3.3.9/ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz
[root@yunwei tarbag]# tar -zxvf ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz -C ../software/
[root@yunwei tarbag]# mv ../software/ZendOptimizer-3.3.9-linux-glibc23-x86_64/ /usr/local/Zend3
[root@yunwei tarbag]# grep -i 'zend3' /usr/local/php5.2.13/etc/php.ini |grep -v ';'
zend_extension=/usr/local/Zend3/data/5_2_x_comp/ZendOptimizer.so

[root@yunwei tarbag]# service php-fpm restart
Shutting down php_fpm . done
Starting php_fpm done
[root@yunwei tarbag]# service nginx restart
nginx is restarted...


[root@yunwei tarbag]# /usr/local/php5.2.13/bin/php -m |grep -i zend
[Zend Modules]
Zend Optimizer



5: 整合memcached

[root@yunwei ~]# cd /usr/local/src/tarbag/
[root@yunwei tarbag]# wget http://pecl.php.net/get/memcache-2.2.5.tgz
[root@yunwei tarbag]# tar -zxvf memcache-2.2.5.tgz -C ../software/
[root@yunwei tarbag]# cd ../software/memcache-2.2.5/
[root@yunwei memcache-2.2.5]# /usr/local/php5.2.13/bin/phpize 
Configuring for:
PHP Api Version:         20041225
Zend Module Api No:      20060613
Zend Extension Api No:   220060519

[root@yunwei memcache-2.2.5]# ./configure --enable-memcache --with-php-config=/usr/local/php5.2.13/bin/php-config --with-zlib-dir
[root@yunwei memcache-2.2.5]# make &amp;&amp; make install

………………………………………………输出省略………………………………………………
Installing shared extensions:     /usr/local/php5.2.13/lib/php/extensions/no-debug-non-zts-20060613/


[root@yunwei memcache-2.2.5]# grep -A 2 'extension_dir' /usr/local/php5.2.13/etc/php.ini |grep -v ';' 
extension_dir = "/usr/local/php5.2.13/lib/php/extensions/no-debug-non-zts-20060613/"
extension=memcache.so

[root@yunwei memcache-2.2.5]# service php-fpm restart
Shutting down php_fpm . done
Starting php_fpm done
[root@yunwei memcache-2.2.5]# service nginx restart
nginx is restarted...

[root@yunwei memcache-2.2.5]# /usr/local/php5.2.13/bin/php -m |grep mem
memcache



6: 重定向
[root@yunwei ~]# grep -A 3 -B 8 'permanent' /usr/local/nginx/conf/nginx.conf
        location / {
            root   html;
            autoindex on;
            index index.html index.htm;
            allow   192.168.50.0/24;
            deny    all;
            auth_basic "test";
            auth_basic_user_file /usr/local/nginx/conf/.htpasswd;
            rewrite /download http://apt.sw.be permanent;
        }

        error_page 404              /404.html;


[root@yunwei ~]# tail -f /usr/local/nginx/logs/access.log 
192.168.50.40 - - [21/Jun/2010:09:57:13 +0800] "GET / HTTP/1.1" 304 0 "-" "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; 360SE)"

7:定义日志格式：
[root@yunwei ~]# grep -A 3 'log_format' /usr/local/nginx/conf/nginx.conf
    log_format access '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

[root@yunwei ~]# grep 'access_log' /usr/local/nginx/conf/nginx.conf
        access_log /usr/local/nginx/logs/localhost.log access;

[root@yunwei ~]# tail -f /usr/local/nginx/logs/localhost.log

192.168.50.40 - - [30/Aug/2010:17:04:29 +0800] "GET /themes/original/img/ HTTP/1.1" 200 2144 "http://192.168.50.3/themes/original/" "Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN; rv:1.9.2) Gecko/20100115 Firefox/3.6" "-"


8: 按时间来切割日志：
[root@yunwei ~]# cat cut_nginx_log.sh 
#!/bin/sh
#function: cut nginx's log at 00:00 wtih crontab

log_path=/usr/local/nginx/logs

mkdir -p $log_path/$(date -d "yesterday" +"%Y")/$(date -d "yesterday" +"%m")

mv $log_path/localhost.log $log_path/$(date -d "yesterday" +"%Y")/$(date -d "yesterday" +"%m")/localhost_$(date -d "yesterday" +"%Y%m%d").log

kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`

9: 优化linux内核参数，将如下参数写入/etc/sysctl.conf文件，使用sysctl -p命令生效

net.ipv4.tcp_max_syn_backlog = 65535      //表示SYN队列的长度，默认为1024，加大队列长度为65535，可以容纳更多等待连接的网络连接数
net.core.netdev_max_backlog = 32768       //表示当网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目
net.core.somaxconn = 32768                   //默认值是128,这个值不能调高系统的最大连接数，但是能调高系统同时发起连接的tcp连接数
net.core.wmem_default = 8388608           //默认的TCP数据发送缓冲大小
net.core.rmem_default = 8388608            //默认的TCP数据接收缓冲大小
net.core.wmem_max     = 16777216          //默认的TCP数据发送缓冲大小
net.core.rmem_max     = 16777216          //默认的TCP数据接收缓冲大小
net.ipv4.tcp_timestamps = 0                     //时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包
net.ipv4.tcp_synack_retries = 2        //这个设置决定了内核放弃连接之前发送SYN+ACK包的数量
net.ipv4.tcp_syn_retries = 2              //在内核放弃建立连接之前发送SYN包的数量
net.ipv4.tcp_tw_recycle = 1               //能够更快地回收TIME-WAIT套接字。缺省值是1。除非有技术专家的建议和要求，否则不应修改
net.ipv4.tcp_tw_reuse = 1                   //默认值是0,该文件表示是否允许重新应用处于TIME-WAIT状态的socket用于新的TCP连接
net.ipv4.ip_local_port_range = 1024 65535     //用于向外连接的端口范围。缺省情况下其实很小：1024到4999。
net.ipv4.tcp_mem = 94500000 915000000 927000000
net.ipv4.tcp_max_orphans = 327680

/proc/sys/net/ipv4/tcp_max_orphans
系 统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤儿连接将即刻被复位并打印出警告信息。这个限制仅仅是为了防止简单的DoS攻击，你绝对不能过分依靠它或者人为地减小这个值，更应该增加这个值(如果增加了内存之后)

tcp_mem(3个INTEGER变量)：low, pressure, high

low：当TCP使用了低于该值的内存页面数时，TCP不会考虑释放内存。(理想情况下，这个值应与指定给 tcp_wmem 的第 2 个值相匹配 - 这第 2 个值表明，最大页面大小乘以最大并发请求数除以页大小 (131072 * 300 / 4096)。 )

pressure：当TCP使用了超过该值的内存页面数量时，TCP试图稳定其内存使用，进入pressure模式，当内存消耗低于low值时则退出pressure状态。(理想情况下这个值应该是 TCP 可以使用的总缓冲区大小的最大值 (204800 * 300 / 4096)。 )

high：允许所有tcp sockets用于排队缓冲数据报的页面量。(如果超过这个值，TCP 连接将被拒绝，这就是为什么不要令其过于保守 (512000 * 300 / 4096) 的原因了。 在这种情况下，提供的价值很大，它能处理很多连接，是所预期的 2.5 倍；或者使现有连接能够传输 2.5 倍的数据)

10：nginx同tomcat的整合，java和tomcat的安装此处就不在赘述，可以参考

http://hi.baidu.com/naruto6006/blog/item/228bee425ee80b1b73f05da8.html

tomcat服务状态如下，监听80端口
[root@jsb-ylw-5024 ~]# netstat -ntpl |grep java
tcp        0      0 ::ffff:127.0.0.1:8005       :::*                    LISTEN      923/java           
tcp        0      0 :::8009                           :::*                    LISTEN      3923/java           
tcp        0      0 :::80                               :::*                     LISTEN      3923/java    


修改nginx主配置文件相关内容如下：

upstream tomcat_server {
    server 192.168.50.24:80;}


location ~\.(jsp|jspx|do)?$ {
                proxy_set_header Host $host;
                proxy_set_header X-forwarded-For $remote_addr;
                proxy_pass http://tomcat_server;

检测配置文件语法，重启nginx服务：
[root@yunwei ~]# /usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@yunwei ~]# service nginx restart
nginx is restarted..



[root@jsb-ylw-5024 ~]# cat /www/tmp/index.jsp 
&lt;%@ page contentType="text/html; charset=gb2312" language="java" import="java.sql.*" errorPage="" %&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;
&lt;title&gt;301??¨?&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
this is a jsp test page.....
&lt;%
String requestPage = request.getRequestURI();
String queryString = (request.getQueryString() == null ? "" : "?" + request.getQueryString());
if(request.getRequestURL().indexOf("http://192.168.50.3") &gt;=0) {
%&gt;
this is jsp!!
&lt;%
}
%&gt;
&lt;/body&gt;
&lt;/html&gt;</t>
</tnodes>
</leo_file>
