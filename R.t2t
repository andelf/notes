

+ 基本知识 +

help()
help(c)
object()
rm(x,y)



+ 简单计算处理 +

++ 向量和赋值 ++

> x <- c(10.4, 5.6, 3.1, 6.4, 21.7)

> assign("x", c(10.4, 5.6, 3.1, 6.4, 21.7))

x = c(10.4, 5.6, 3.1, 6.4, 21.7)

> c(10.4, 5.6, 3.1, 6.4, 21.7) -> x

++ 向量算数 ++

> v <- 2*x + y + 1

elementary arithmetic operators: +, -, *, / and ^ .
common arithmetic functions:  log, exp, sin, cos, tan, sqrt, ...
max(x) min(x)
range(x) = c(min(x), max(x))
length(x)
sum(x) , prod(x)
statistical functions:
	    mean(x) = sum(x)/length(x)
	    var(x) =  sum((x-mean(x))^2)/(length(x)-1)
sort(x)

注意:
sqrt(-17) 值为 NaN 而 sqrt(-17+0i) 正确
pmax , pmin 返回处理向量.

++ 生成序列 ++

1:30 
2*1:30 = 2 * (1:30)
30:1
seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),
    length.out = NULL, along.with = NULL, ...)
rep(x,times=5)
rep(x,each=5)

++ 逻辑向量 ++

> temp <- x > 13
逻辑操作: <, <=, >, >=, == 
& |
TRUE FALSE

++ 丢失的值 ++

is.na(x) 与 x== NA 的区别

> z <- c(1:3,NA);  ind <- is.na(z)

NaN
is.na(x)
is.nan(x)

++ 字符向量 ++

labs <- paste(c("X","Y"), 1:10, sep="")

c("X1", "Y2", "X3", "Y4", "X5", "Y6", "X7", "Y8", "X9", "Y10")

++ 索引向量;选择修改数据集合的子集 ++

> y <- x[!is.na(x)]
> (x+1)[(!is.na(x)) & x>0] -> z
> x[1:10]
> c("x","y")[rep(c(1,2,2,1), times=4)]
不包含
> y <- x[-(1:5)]
字符串索引
> fruit <- c(5, 10, 1, 20)
> names(fruit) <- c("orange", "banana", "apple", "peach")
> lunch <- fruit[c("apple","orange")]


> x[is.na(x)] <- 0
replaces any missing values in x by zeros and 
> y[y < 0] <- -y[y < 0]
has the same effect as 
> y <- abs(y)

======================


+ 其他对象类型 +

++ 本质属性, mode 和 length ++

向量中的成员必须有相同的 mode .
mode(x) length(x)

> z <- 0:9
> digits <- as.character(z) 
> d <- as.integer(digits)

++ 改变对象的 length ++
空对象
> e <- numeric()
> e[3] <- 17
# NA NA 17
设置长度
> alpha <- alpha[2 * 1:5]
> length(alpha) <- 3

++ 获得设置属性 ++
attributes(object)
attr(object, name) 
> attr(z, "dim") <- c(10,10)
设置 z 为 10 维 matrix

x <- 1:10
attr(x,"dim") <- c(2, 5)

++ 对象的类 ++

所有的对象都有一个 class 
class(x) 返回
"numeric", "logical", "character" or "list",
"matrix", "array", "factor" and "data.frame"

unclass(x) 将 x 作为普通 list 打印

======================


+ 有序/无序 factor  +

用于表示物件的离散分类

++ 简单例子 ++

> state <- c("tas", "sa",  "qld", "nsw", "nsw", "nt",  "wa",  "wa",
                  "qld", "vic", "nsw", "vic", "qld", "qld", "sa",  "tas",
                  "sa",  "nt",  "wa",  "vic", "qld", "nsw", "nsw", "wa",
                  "sa",  "act", "nsw", "vic", "vic", "act")

使用 factor() 函数闯将: 

> statef <- factor(state)

print() 函数处理 factor 时, 略有不同

> statef
 [1] tas sa  qld nsw nsw nt  wa  wa  qld vic nsw vic qld qld sa
[16] tas sa  nt  wa  vic qld nsw nsw wa  sa  act nsw vic vic act
Levels:  act nsw nt qld sa tas vic wa

使用 levels() 函数:

> levels(statef)
[1] "act" "nsw" "nt"  "qld" "sa"  "tas" "vic" "wa"

++ tapply() 函数和 ragged array ++

.....

+ Array 和 Matrix +

++ Array ++

> dim(z) <- c(3,5,100)

c(3,4,2) 维度:
a[1,1,1], a[2,1,1], ..., a[2,4,2], a[3,4,2]. 

++ Array 索引, 切片 ++

a[2,,]
获得 4*2 维的 array
即:
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
      a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
k
